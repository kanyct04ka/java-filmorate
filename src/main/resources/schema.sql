create table if not exists users (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email varchar(100) UNIQUE NOT NULL,
    login varchar(100) NOT NULL,
    name varchar(100),
    birthday date
);

create table if not exists user_friends (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INTEGER,
    friend_id INTEGER,
    is_friend boolean default false,

    CONSTRAINT un_user_friends_pair UNIQUE (user_id, friend_id),
    CONSTRAINT fk_user_friends_user_id FOREIGN KEY (user_id) REFERENCES users(id),
    CONSTRAINT fk_user_friends_friend_id FOREIGN KEY (friend_id) REFERENCES users(id)
);

create table if not exists genres (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(100) UNIQUE NOT NULL
);

create table if not exists mpa (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(100) UNIQUE NOT NULL
);

create table if not exists films (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name varchar(255) NOT NULL,
    description varchar(1000),
    release_date date,
    duration INT8,
    mpa_id INTEGER,

    CONSTRAINT fk_film_mpa_id FOREIGN KEY (mpa_id) REFERENCES mpa(id)
);

create table if not exists film_genres (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_id INTEGER,
    genre_id INTEGER,

    CONSTRAINT un_film_genre_pair UNIQUE (film_id, genre_id),
    CONSTRAINT fk_film_genres_film_id FOREIGN KEY (film_id) REFERENCES films(id),
    CONSTRAINT fk_film_genres_genre_id FOREIGN KEY (genre_id) REFERENCES genres(id)
);

create table if not exists likes (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_id INTEGER,
    user_id INTEGER,

    CONSTRAINT un_likes_pair UNIQUE (film_id, user_id),
    CONSTRAINT fk_likes_film_id FOREIGN KEY (film_id) REFERENCES films(id),
    CONSTRAINT fk_likes_user_id FOREIGN KEY (user_id) REFERENCES users(id)
);

create table if not exists reviews (
    review_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content varchar(500) not null,
    is_positive boolean not null,
    user_id INTEGER not null,
    film_id INTEGER not null,
    useful INT default 0,

    CONSTRAINT fk_reviews_user_id FOREIGN KEY (user_id) REFERENCES users(id),
    CONSTRAINT fk_reviews_film_id FOREIGN KEY (film_id) REFERENCES films(id)
);

create table if not exists review_likes (
    review_id INTEGER not null,
    user_id INTEGER not null,
    is_positive boolean not null,

    CONSTRAINT pk_review_likes PRIMARY KEY (review_id, user_id),
    CONSTRAINT fk_review_likes_review_id FOREIGN KEY (review_id) REFERENCES reviews(review_id),
    CONSTRAINT fk_review_likes_user_id FOREIGN KEY (user_id) REFERENCES users(id)
);

